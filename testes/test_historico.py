# testes/test_historico.py
# -----------------------------------------------------------
# üìÑ Teste automatizado para o endpoint /historico.
# O objetivo √© garantir que o hist√≥rico de sess√µes (voltas)
# seja exibido corretamente na interface do usu√°rio.
# -----------------------------------------------------------

import pytest
from httpx import AsyncClient
from httpx._transports.asgi import ASGITransport
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.main import app  
from app.models import Base, SessoesJogo, get_db


# ===========================================================
# üîß Configura√ß√£o do banco de dados tempor√°rio (SQLite em mem√≥ria)
# ===========================================================
# Cada teste roda num banco isolado e descart√°vel,
# garantindo independ√™ncia total entre os testes.
SQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Cria as tabelas baseadas no modelo da aplica√ß√£o
Base.metadata.create_all(bind=engine)


# ===========================================================
# üß™ Fixtures do Pytest
# ===========================================================

@pytest.fixture()
def db_session():
    """Cria e fornece uma sess√£o de banco de dados tempor√°ria para o teste."""
    session = TestingSessionLocal()
    try:
        yield session
    finally:
        session.close()


# ===========================================================
# üß© Teste principal: hist√≥rico de sess√µes do jogo
# ===========================================================
@pytest.mark.asyncio
async def test_historico_sucesso(db_session):
    """
    Verifica se o endpoint /historico retorna corretamente os dados
    das sess√µes de jogo armazenadas no banco.
    """

    # Simula uma sess√£o de jogo salva no banco
    Nome_carro = "M3 GT2"
    Quantidade_volta = "5"
    Tempo_volta = "25.90810394287109"

    nova_sessao = SessoesJogo(
        Nome_carro=Nome_carro,
        Quantidade_volta=Quantidade_volta,
        Tempo_volta=Tempo_volta,
    )
    db_session.add(nova_sessao)
    db_session.commit()

    # Substitui a depend√™ncia de DB original pela de teste
    app.dependency_overrides[get_db] = lambda: db_session

    # Usa transporte ASGI pra simular requisi√ß√µes HTTP reais
    transport = ASGITransport(app=app)

    # Faz a requisi√ß√£o GET para o endpoint /historico
    async with AsyncClient(transport=transport, base_url="http://test") as ac:
        response = await ac.get("/historico")

    # ======================
    # ‚úÖ Verifica√ß√µes finais
    # ======================
    assert response.status_code == 200               # P√°gina carregou com sucesso

    html = response.text
    assert "M3 GT2" in html                          # O nome do carro aparece no HTML
    assert "25.91 s" in html                         # O tempo aparece formatado corretamente

    # Limpa overrides de depend√™ncias
    app.dependency_overrides.clear()
