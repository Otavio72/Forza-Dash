# testes/test_auth.py
# -----------------------------------------------------------
# üìÑ Teste automatizado para o m√≥dulo de autentica√ß√£o do app.
# O objetivo √© validar o fluxo de acesso √† p√°gina de perfil,
# garantindo que o sistema retorne corretamente os dados do
# usu√°rio autenticado.
# -----------------------------------------------------------

import pytest
from httpx import AsyncClient
from httpx._transports.asgi import ASGITransport
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from passlib.hash import bcrypt
from app.main import app  
from app.models import Base, Usuario, get_db

# ===========================================================
# üîß Configura√ß√£o do banco de dados tempor√°rio (em mem√≥ria)
# ===========================================================
# Aqui criamos um SQLite apenas em mem√≥ria ‚Äî r√°pido e isolado ‚Äî
# ideal para rodar testes sem afetar o banco real.
SQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Cria todas as tabelas definidas no modelo para uso nos testes
Base.metadata.create_all(bind=engine)


# ===========================================================
# üß™ Fixtures do Pytest
# ===========================================================
# Criam o ambiente de teste e controlam a sess√£o com o banco

@pytest.fixture()
def db_session():
    """Cria uma sess√£o de banco de dados tempor√°ria para cada teste."""
    session = TestingSessionLocal()
    try:
        yield session
    finally:
        session.close()


@pytest.fixture(autouse=True)
def override_get_db(db_session):
    """Substitui a depend√™ncia original de get_db pelo banco de teste."""
    app.dependency_overrides[get_db] = lambda: db_session
    yield
    app.dependency_overrides.clear()


# ===========================================================
# üß© Teste principal: acesso ao perfil do usu√°rio
# ===========================================================
@pytest.mark.asyncio
async def test_perfil_sucesso(db_session):
    """
    Verifica se o endpoint /perfil exibe corretamente os dados
    do usu√°rio logado quando o cookie de autentica√ß√£o √© v√°lido.
    """

    # Simula um usu√°rio real com senha criptografada
    senha = "1234"
    senha_hashed = bcrypt.hash(senha)
    usuario = Usuario(email="teste@email.com", senha=senha_hashed, nome="testNome")

    # Adiciona o usu√°rio no banco tempor√°rio
    db_session.add(usuario)
    db_session.commit()
    db_session.refresh(usuario)

    # Garante que a aplica√ß√£o use o DB de teste
    app.dependency_overrides[get_db] = lambda: db_session

    # Configura o transporte ASGI para simular requisi√ß√µes HTTP reais
    transport = ASGITransport(app=app)

    # Executa uma requisi√ß√£o GET para o endpoint /perfil
    # simulando o cookie de autentica√ß√£o do usu√°rio
    async with AsyncClient(transport=transport, base_url="http://test") as ac:
        response = await ac.get("/perfil", cookies={"usuario_id": str(usuario.id)})

    # ======================
    # ‚úÖ Verifica√ß√µes finais
    # ======================
    assert response.status_code == 200  # P√°gina carregou com sucesso

    html = response.text
    assert "testNome" in html           # Nome exibido corretamente
    assert "teste@email.com" in html    # Email exibido corretamente

    # Limpa overrides de depend√™ncia
    app.dependency_overrides.clear()
